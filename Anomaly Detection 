{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Anomaly Detection in Network Traffic"
      ],
      "metadata": {
        "id": "3M4GV2tQTyJ-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Data Collection and Preprocessing"
      ],
      "metadata": {
        "id": "6PFh5YmYUDRt"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3YjhxXIsQ00G",
        "outputId": "60cfebc2-b32e-435f-fc30-3c5bb1e102b8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(   bytes_in  bytes_out             creation_time                  end_time  \\\n",
              " 0      5602      12990 2024-04-25 23:00:00+00:00 2024-04-25 23:10:00+00:00   \n",
              " 1     30912      18186 2024-04-25 23:00:00+00:00 2024-04-25 23:10:00+00:00   \n",
              " 2     28506      13468 2024-04-25 23:00:00+00:00 2024-04-25 23:10:00+00:00   \n",
              " 3     30546      14278 2024-04-25 23:00:00+00:00 2024-04-25 23:10:00+00:00   \n",
              " 4      6526      13892 2024-04-25 23:00:00+00:00 2024-04-25 23:10:00+00:00   \n",
              " \n",
              "             src_ip src_ip_country_code protocol  response.code  dst_port  \\\n",
              " 0   147.161.161.82                  AE    HTTPS            200       443   \n",
              " 1     165.225.33.6                  US    HTTPS            200       443   \n",
              " 2  165.225.212.255                  CA    HTTPS            200       443   \n",
              " 3   136.226.64.114                  US    HTTPS            200       443   \n",
              " 4   165.225.240.79                  NL    HTTPS            200       443   \n",
              " \n",
              "          dst_ip              rule_names                      observation_name  \\\n",
              " 0  10.138.69.97  Suspicious Web Traffic  Adversary Infrastructure Interaction   \n",
              " 1  10.138.69.97  Suspicious Web Traffic  Adversary Infrastructure Interaction   \n",
              " 2  10.138.69.97  Suspicious Web Traffic  Adversary Infrastructure Interaction   \n",
              " 3  10.138.69.97  Suspicious Web Traffic  Adversary Infrastructure Interaction   \n",
              " 4  10.138.69.97  Suspicious Web Traffic  Adversary Infrastructure Interaction   \n",
              " \n",
              "     source.meta     source.name                  time detection_types  \\\n",
              " 0  AWS_VPC_Flow  prod_webserver  2024-04-25T23:00:00Z        waf_rule   \n",
              " 1  AWS_VPC_Flow  prod_webserver  2024-04-25T23:00:00Z        waf_rule   \n",
              " 2  AWS_VPC_Flow  prod_webserver  2024-04-25T23:00:00Z        waf_rule   \n",
              " 3  AWS_VPC_Flow  prod_webserver  2024-04-25T23:00:00Z        waf_rule   \n",
              " 4  AWS_VPC_Flow  prod_webserver  2024-04-25T23:00:00Z        waf_rule   \n",
              " \n",
              "    duration  \n",
              " 0     600.0  \n",
              " 1     600.0  \n",
              " 2     600.0  \n",
              " 3     600.0  \n",
              " 4     600.0  ,\n",
              " bytes_in               0\n",
              " bytes_out              0\n",
              " creation_time          0\n",
              " end_time               0\n",
              " src_ip                 0\n",
              " src_ip_country_code    0\n",
              " protocol               0\n",
              " response.code          0\n",
              " dst_port               0\n",
              " dst_ip                 0\n",
              " rule_names             0\n",
              " observation_name       0\n",
              " source.meta            0\n",
              " source.name            0\n",
              " time                   0\n",
              " detection_types        0\n",
              " duration               0\n",
              " dtype: int64)"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the dataset\n",
        "file_path = 'CloudWatch_Traffic_Web_Attack.csv'\n",
        "data = pd.read_csv(file_path)\n",
        "\n",
        "# Convert timestamp columns to datetime\n",
        "data['creation_time'] = pd.to_datetime(data['creation_time'])\n",
        "data['end_time'] = pd.to_datetime(data['end_time'])\n",
        "\n",
        "# Calculate duration of each event\n",
        "data['duration'] = (data['end_time'] - data['creation_time']).dt.total_seconds()\n",
        "\n",
        "# Check for missing values\n",
        "missing_values = data.isnull().sum()\n",
        "\n",
        "data.head(), missing_values\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Feature Extraction"
      ],
      "metadata": {
        "id": "bpRND_QmUOSp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Extract packet size\n",
        "data['packet_size'] = data['bytes_in'] + data['bytes_out']\n",
        "\n",
        "# Encoding source and destination information\n",
        "data['src_ip_encoded'] = data['src_ip'].astype('category').cat.codes\n",
        "data['dst_ip_encoded'] = data['dst_ip'].astype('category').cat.codes\n",
        "data['src_ip_country_code_encoded'] = data['src_ip_country_code'].astype('category').cat.codes\n",
        "\n",
        "# Select features for anomaly detection\n",
        "features = data[['packet_size', 'duration', 'src_ip_encoded', 'dst_ip_encoded', 'src_ip_country_code_encoded']]\n",
        "features.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "QvLddF65Q-UV",
        "outputId": "85d90999-eda4-4b12-c732-465f323960f8"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   packet_size  duration  src_ip_encoded  dst_ip_encoded  \\\n",
              "0        18592     600.0               5               0   \n",
              "1        49098     600.0              12               0   \n",
              "2        41974     600.0               8               0   \n",
              "3        44824     600.0               0               0   \n",
              "4        20418     600.0              10               0   \n",
              "\n",
              "   src_ip_country_code_encoded  \n",
              "0                            0  \n",
              "1                            6  \n",
              "2                            2  \n",
              "3                            6  \n",
              "4                            5  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6a8c47ea-8747-4931-8014-1ade488f41ae\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>packet_size</th>\n",
              "      <th>duration</th>\n",
              "      <th>src_ip_encoded</th>\n",
              "      <th>dst_ip_encoded</th>\n",
              "      <th>src_ip_country_code_encoded</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>18592</td>\n",
              "      <td>600.0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>49098</td>\n",
              "      <td>600.0</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>41974</td>\n",
              "      <td>600.0</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>44824</td>\n",
              "      <td>600.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20418</td>\n",
              "      <td>600.0</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6a8c47ea-8747-4931-8014-1ade488f41ae')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6a8c47ea-8747-4931-8014-1ade488f41ae button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6a8c47ea-8747-4931-8014-1ade488f41ae');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-44c3a851-40b0-45ee-acc5-6ff60d2629e5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-44c3a851-40b0-45ee-acc5-6ff60d2629e5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-44c3a851-40b0-45ee-acc5-6ff60d2629e5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "features",
              "summary": "{\n  \"name\": \"features\",\n  \"rows\": 282,\n  \"fields\": [\n    {\n      \"column\": \"packet_size\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4403688,\n        \"min\": 124,\n        \"max\": 26769014,\n        \"num_unique_values\": 274,\n        \"samples\": [\n          14012,\n          14270,\n          34028\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 600.0,\n        \"max\": 600.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          600.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"src_ip_encoded\",\n      \"properties\": {\n        \"dtype\": \"int8\",\n        \"num_unique_values\": 28,\n        \"samples\": [\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dst_ip_encoded\",\n      \"properties\": {\n        \"dtype\": \"int8\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"src_ip_country_code_encoded\",\n      \"properties\": {\n        \"dtype\": \"int8\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Applying Anomaly Detection Algorithm (Isolation Forest)"
      ],
      "metadata": {
        "id": "GzjNcllnUUuz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import IsolationForest\n",
        "import numpy as np\n",
        "\n",
        "# Initialize Isolation Forest model\n",
        "iso_forest = IsolationForest(contamination=0.05, random_state=42)\n",
        "\n",
        "# Fit the model\n",
        "iso_forest.fit(features)\n",
        "\n",
        "# Predict anomalies\n",
        "data['anomaly'] = iso_forest.predict(features)\n",
        "\n",
        "# Convert anomaly values to 0 and 1 (0: normal, 1: anomaly)\n",
        "data['anomaly'] = np.where(data['anomaly'] == 1, 0, 1)\n",
        "\n",
        "# Display anomalies\n",
        "anomalies = data[data['anomaly'] == 1]\n",
        "anomalies.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 342
        },
        "id": "rlKrAkfxRNv7",
        "outputId": "38399887-12bb-46db-9793-8642fba52c70"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     bytes_in  bytes_out             creation_time                  end_time  \\\n",
              "36    4190330     283456 2024-04-25 23:30:00+00:00 2024-04-25 23:40:00+00:00   \n",
              "80       7786      14138 2024-04-26 00:20:00+00:00 2024-04-26 00:30:00+00:00   \n",
              "88       3514       2648 2024-04-26 00:30:00+00:00 2024-04-26 00:40:00+00:00   \n",
              "132   1889834      34306 2024-04-26 01:20:00+00:00 2024-04-26 01:30:00+00:00   \n",
              "176  18273120    1145109 2024-04-26 08:10:00+00:00 2024-04-26 08:20:00+00:00   \n",
              "\n",
              "             src_ip src_ip_country_code protocol  response.code  dst_port  \\\n",
              "36    155.91.45.242                  US    HTTPS            200       443   \n",
              "80    94.188.248.74                  IL    HTTPS            200       443   \n",
              "88    94.188.248.74                  IL    HTTPS            200       443   \n",
              "132  165.225.240.79                  NL    HTTPS            200       443   \n",
              "176   155.91.45.242                  US    HTTPS            200       443   \n",
              "\n",
              "           dst_ip  ...   source.meta     source.name                  time  \\\n",
              "36   10.138.69.97  ...  AWS_VPC_Flow  prod_webserver  2024-04-25T23:30:00Z   \n",
              "80   10.138.69.97  ...  AWS_VPC_Flow  prod_webserver  2024-04-26T00:20:00Z   \n",
              "88   10.138.69.97  ...  AWS_VPC_Flow  prod_webserver  2024-04-26T00:30:00Z   \n",
              "132  10.138.69.97  ...  AWS_VPC_Flow  prod_webserver  2024-04-26T01:20:00Z   \n",
              "176  10.138.69.97  ...  AWS_VPC_Flow  prod_webserver  2024-04-26T08:10:00Z   \n",
              "\n",
              "    detection_types duration packet_size  src_ip_encoded  dst_ip_encoded  \\\n",
              "36         waf_rule    600.0     4473786               6               0   \n",
              "80         waf_rule    600.0       21924              27               0   \n",
              "88         waf_rule    600.0        6162              27               0   \n",
              "132        waf_rule    600.0     1924140              10               0   \n",
              "176        waf_rule    600.0    19418229               6               0   \n",
              "\n",
              "     src_ip_country_code_encoded  anomaly  \n",
              "36                             6        1  \n",
              "80                             4        1  \n",
              "88                             4        1  \n",
              "132                            5        1  \n",
              "176                            6        1  \n",
              "\n",
              "[5 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-53eac298-ac9c-470d-8001-06904531768e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>bytes_in</th>\n",
              "      <th>bytes_out</th>\n",
              "      <th>creation_time</th>\n",
              "      <th>end_time</th>\n",
              "      <th>src_ip</th>\n",
              "      <th>src_ip_country_code</th>\n",
              "      <th>protocol</th>\n",
              "      <th>response.code</th>\n",
              "      <th>dst_port</th>\n",
              "      <th>dst_ip</th>\n",
              "      <th>...</th>\n",
              "      <th>source.meta</th>\n",
              "      <th>source.name</th>\n",
              "      <th>time</th>\n",
              "      <th>detection_types</th>\n",
              "      <th>duration</th>\n",
              "      <th>packet_size</th>\n",
              "      <th>src_ip_encoded</th>\n",
              "      <th>dst_ip_encoded</th>\n",
              "      <th>src_ip_country_code_encoded</th>\n",
              "      <th>anomaly</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>4190330</td>\n",
              "      <td>283456</td>\n",
              "      <td>2024-04-25 23:30:00+00:00</td>\n",
              "      <td>2024-04-25 23:40:00+00:00</td>\n",
              "      <td>155.91.45.242</td>\n",
              "      <td>US</td>\n",
              "      <td>HTTPS</td>\n",
              "      <td>200</td>\n",
              "      <td>443</td>\n",
              "      <td>10.138.69.97</td>\n",
              "      <td>...</td>\n",
              "      <td>AWS_VPC_Flow</td>\n",
              "      <td>prod_webserver</td>\n",
              "      <td>2024-04-25T23:30:00Z</td>\n",
              "      <td>waf_rule</td>\n",
              "      <td>600.0</td>\n",
              "      <td>4473786</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>80</th>\n",
              "      <td>7786</td>\n",
              "      <td>14138</td>\n",
              "      <td>2024-04-26 00:20:00+00:00</td>\n",
              "      <td>2024-04-26 00:30:00+00:00</td>\n",
              "      <td>94.188.248.74</td>\n",
              "      <td>IL</td>\n",
              "      <td>HTTPS</td>\n",
              "      <td>200</td>\n",
              "      <td>443</td>\n",
              "      <td>10.138.69.97</td>\n",
              "      <td>...</td>\n",
              "      <td>AWS_VPC_Flow</td>\n",
              "      <td>prod_webserver</td>\n",
              "      <td>2024-04-26T00:20:00Z</td>\n",
              "      <td>waf_rule</td>\n",
              "      <td>600.0</td>\n",
              "      <td>21924</td>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>88</th>\n",
              "      <td>3514</td>\n",
              "      <td>2648</td>\n",
              "      <td>2024-04-26 00:30:00+00:00</td>\n",
              "      <td>2024-04-26 00:40:00+00:00</td>\n",
              "      <td>94.188.248.74</td>\n",
              "      <td>IL</td>\n",
              "      <td>HTTPS</td>\n",
              "      <td>200</td>\n",
              "      <td>443</td>\n",
              "      <td>10.138.69.97</td>\n",
              "      <td>...</td>\n",
              "      <td>AWS_VPC_Flow</td>\n",
              "      <td>prod_webserver</td>\n",
              "      <td>2024-04-26T00:30:00Z</td>\n",
              "      <td>waf_rule</td>\n",
              "      <td>600.0</td>\n",
              "      <td>6162</td>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>132</th>\n",
              "      <td>1889834</td>\n",
              "      <td>34306</td>\n",
              "      <td>2024-04-26 01:20:00+00:00</td>\n",
              "      <td>2024-04-26 01:30:00+00:00</td>\n",
              "      <td>165.225.240.79</td>\n",
              "      <td>NL</td>\n",
              "      <td>HTTPS</td>\n",
              "      <td>200</td>\n",
              "      <td>443</td>\n",
              "      <td>10.138.69.97</td>\n",
              "      <td>...</td>\n",
              "      <td>AWS_VPC_Flow</td>\n",
              "      <td>prod_webserver</td>\n",
              "      <td>2024-04-26T01:20:00Z</td>\n",
              "      <td>waf_rule</td>\n",
              "      <td>600.0</td>\n",
              "      <td>1924140</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>18273120</td>\n",
              "      <td>1145109</td>\n",
              "      <td>2024-04-26 08:10:00+00:00</td>\n",
              "      <td>2024-04-26 08:20:00+00:00</td>\n",
              "      <td>155.91.45.242</td>\n",
              "      <td>US</td>\n",
              "      <td>HTTPS</td>\n",
              "      <td>200</td>\n",
              "      <td>443</td>\n",
              "      <td>10.138.69.97</td>\n",
              "      <td>...</td>\n",
              "      <td>AWS_VPC_Flow</td>\n",
              "      <td>prod_webserver</td>\n",
              "      <td>2024-04-26T08:10:00Z</td>\n",
              "      <td>waf_rule</td>\n",
              "      <td>600.0</td>\n",
              "      <td>19418229</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-53eac298-ac9c-470d-8001-06904531768e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-53eac298-ac9c-470d-8001-06904531768e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-53eac298-ac9c-470d-8001-06904531768e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-afebd027-d59e-4d15-893e-d970da822992\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-afebd027-d59e-4d15-893e-d970da822992')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-afebd027-d59e-4d15-893e-d970da822992 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "anomalies"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Evaluation and Validation of Detected Anomalies"
      ],
      "metadata": {
        "id": "ChGkXua-UbKX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Visualize the distribution of anomalies\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.countplot(x='anomaly', data=data)\n",
        "plt.title('Distribution of Anomalies')\n",
        "plt.xlabel('Anomaly (0: Normal, 1: Anomaly)')\n",
        "plt.ylabel('Count')\n",
        "plt.show()\n",
        "\n",
        "# Examine statistics of the anomalies\n",
        "anomaly_stats = anomalies.describe()\n",
        "normal_stats = data[data['anomaly'] == 0].describe()\n",
        "\n",
        "anomaly_stats, normal_stats\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "_lSB1_6_RRyF",
        "outputId": "5a7cea50-2421-4a19-8e56-44268dbeab1c"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(           bytes_in     bytes_out  response.code  dst_port  duration  \\\n",
              " count  1.500000e+01  1.500000e+01           15.0      15.0      15.0   \n",
              " mean   1.145426e+07  7.101090e+05          200.0     443.0     600.0   \n",
              " std    1.059197e+07  6.583890e+05            0.0       0.0       0.0   \n",
              " min    1.112000e+03  4.300000e+02          200.0     443.0     600.0   \n",
              " 25%    7.630000e+03  1.758600e+04          200.0     443.0     600.0   \n",
              " 50%    1.811920e+07  1.103358e+06          200.0     443.0     600.0   \n",
              " 75%    1.827932e+07  1.138715e+06          200.0     443.0     600.0   \n",
              " max    2.520779e+07  1.561220e+06          200.0     443.0     600.0   \n",
              " \n",
              "         packet_size  src_ip_encoded  dst_ip_encoded  \\\n",
              " count  1.500000e+01       15.000000            15.0   \n",
              " mean   1.216437e+07       13.066667             0.0   \n",
              " std    1.124988e+07        9.823199             0.0   \n",
              " min    1.542000e+03        6.000000             0.0   \n",
              " 25%    2.422000e+04        6.000000             0.0   \n",
              " 50%    1.924720e+07        6.000000             0.0   \n",
              " 75%    1.941735e+07       25.500000             0.0   \n",
              " max    2.676901e+07       27.000000             0.0   \n",
              " \n",
              "        src_ip_country_code_encoded  anomaly  \n",
              " count                    15.000000     15.0  \n",
              " mean                      5.533333      1.0  \n",
              " std                       0.833809      0.0  \n",
              " min                       4.000000      1.0  \n",
              " 25%                       5.500000      1.0  \n",
              " 50%                       6.000000      1.0  \n",
              " 75%                       6.000000      1.0  \n",
              " max                       6.000000      1.0  ,\n",
              "            bytes_in     bytes_out  response.code  dst_port  duration  \\\n",
              " count  2.670000e+02  2.670000e+02          267.0     267.0     267.0   \n",
              " mean   6.232737e+05  4.941077e+04          200.0     443.0     600.0   \n",
              " std    2.453480e+06  1.501063e+05            0.0       0.0       0.0   \n",
              " min    4.000000e+01  4.400000e+01          200.0     443.0     600.0   \n",
              " 25%    5.290000e+03  1.103800e+04          200.0     443.0     600.0   \n",
              " 50%    1.206800e+04  1.346800e+04          200.0     443.0     600.0   \n",
              " 75%    2.947100e+04  2.437200e+04          200.0     443.0     600.0   \n",
              " max    1.823906e+07  1.170896e+06          200.0     443.0     600.0   \n",
              " \n",
              "         packet_size  src_ip_encoded  dst_ip_encoded  \\\n",
              " count  2.670000e+02      267.000000           267.0   \n",
              " mean   6.726845e+05        7.617978             0.0   \n",
              " std    2.602726e+06        6.091728             0.0   \n",
              " min    1.240000e+02        0.000000             0.0   \n",
              " 25%    1.604300e+04        3.000000             0.0   \n",
              " 50%    3.277800e+04        7.000000             0.0   \n",
              " 75%    5.431100e+04       11.000000             0.0   \n",
              " max    1.938372e+07       27.000000             0.0   \n",
              " \n",
              "        src_ip_country_code_encoded  anomaly  \n",
              " count                   267.000000    267.0  \n",
              " mean                      3.707865      0.0  \n",
              " std                       2.091168      0.0  \n",
              " min                       0.000000      0.0  \n",
              " 25%                       2.000000      0.0  \n",
              " 50%                       3.000000      0.0  \n",
              " 75%                       6.000000      0.0  \n",
              " max                       6.000000      0.0  )"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot distributions of packet_size and duration for anomalies vs normal data\n",
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "# Packet Size\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.histplot(data[data['anomaly'] == 0]['packet_size'], color='blue', label='Normal', kde=True)\n",
        "sns.histplot(anomalies['packet_size'], color='red', label='Anomaly', kde=True)\n",
        "plt.title('Packet Size Distribution')\n",
        "plt.legend()\n",
        "\n",
        "# Duration\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.histplot(data[data['anomaly'] == 0]['duration'], color='blue', label='Normal', kde=True)\n",
        "sns.histplot(anomalies['duration'], color='red', label='Anomaly', kde=True)\n",
        "plt.title('Duration Distribution')\n",
        "plt.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 601
        },
        "id": "NjNIrQ3cRUtT",
        "outputId": "cc237bbd-52c9-4588-ace5-8bb6d613f8a9"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Display some example anomalies and normal traffic\n",
        "example_anomalies = anomalies.head(5)\n",
        "example_normal = data[data['anomaly'] == 0].head(5)\n",
        "\n",
        "example_anomalies, example_normal\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RaCXtG4ISnQO",
        "outputId": "d7e619f0-fcf6-4d12-a6a4-f9b29c57d358"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(     bytes_in  bytes_out             creation_time                  end_time  \\\n",
              " 36    4190330     283456 2024-04-25 23:30:00+00:00 2024-04-25 23:40:00+00:00   \n",
              " 80       7786      14138 2024-04-26 00:20:00+00:00 2024-04-26 00:30:00+00:00   \n",
              " 88       3514       2648 2024-04-26 00:30:00+00:00 2024-04-26 00:40:00+00:00   \n",
              " 132   1889834      34306 2024-04-26 01:20:00+00:00 2024-04-26 01:30:00+00:00   \n",
              " 176  18273120    1145109 2024-04-26 08:10:00+00:00 2024-04-26 08:20:00+00:00   \n",
              " \n",
              "              src_ip src_ip_country_code protocol  response.code  dst_port  \\\n",
              " 36    155.91.45.242                  US    HTTPS            200       443   \n",
              " 80    94.188.248.74                  IL    HTTPS            200       443   \n",
              " 88    94.188.248.74                  IL    HTTPS            200       443   \n",
              " 132  165.225.240.79                  NL    HTTPS            200       443   \n",
              " 176   155.91.45.242                  US    HTTPS            200       443   \n",
              " \n",
              "            dst_ip  ...   source.meta     source.name                  time  \\\n",
              " 36   10.138.69.97  ...  AWS_VPC_Flow  prod_webserver  2024-04-25T23:30:00Z   \n",
              " 80   10.138.69.97  ...  AWS_VPC_Flow  prod_webserver  2024-04-26T00:20:00Z   \n",
              " 88   10.138.69.97  ...  AWS_VPC_Flow  prod_webserver  2024-04-26T00:30:00Z   \n",
              " 132  10.138.69.97  ...  AWS_VPC_Flow  prod_webserver  2024-04-26T01:20:00Z   \n",
              " 176  10.138.69.97  ...  AWS_VPC_Flow  prod_webserver  2024-04-26T08:10:00Z   \n",
              " \n",
              "     detection_types duration packet_size  src_ip_encoded  dst_ip_encoded  \\\n",
              " 36         waf_rule    600.0     4473786               6               0   \n",
              " 80         waf_rule    600.0       21924              27               0   \n",
              " 88         waf_rule    600.0        6162              27               0   \n",
              " 132        waf_rule    600.0     1924140              10               0   \n",
              " 176        waf_rule    600.0    19418229               6               0   \n",
              " \n",
              "      src_ip_country_code_encoded  anomaly  \n",
              " 36                             6        1  \n",
              " 80                             4        1  \n",
              " 88                             4        1  \n",
              " 132                            5        1  \n",
              " 176                            6        1  \n",
              " \n",
              " [5 rows x 22 columns],\n",
              "    bytes_in  bytes_out             creation_time                  end_time  \\\n",
              " 0      5602      12990 2024-04-25 23:00:00+00:00 2024-04-25 23:10:00+00:00   \n",
              " 1     30912      18186 2024-04-25 23:00:00+00:00 2024-04-25 23:10:00+00:00   \n",
              " 2     28506      13468 2024-04-25 23:00:00+00:00 2024-04-25 23:10:00+00:00   \n",
              " 3     30546      14278 2024-04-25 23:00:00+00:00 2024-04-25 23:10:00+00:00   \n",
              " 4      6526      13892 2024-04-25 23:00:00+00:00 2024-04-25 23:10:00+00:00   \n",
              " \n",
              "             src_ip src_ip_country_code protocol  response.code  dst_port  \\\n",
              " 0   147.161.161.82                  AE    HTTPS            200       443   \n",
              " 1     165.225.33.6                  US    HTTPS            200       443   \n",
              " 2  165.225.212.255                  CA    HTTPS            200       443   \n",
              " 3   136.226.64.114                  US    HTTPS            200       443   \n",
              " 4   165.225.240.79                  NL    HTTPS            200       443   \n",
              " \n",
              "          dst_ip  ...   source.meta     source.name                  time  \\\n",
              " 0  10.138.69.97  ...  AWS_VPC_Flow  prod_webserver  2024-04-25T23:00:00Z   \n",
              " 1  10.138.69.97  ...  AWS_VPC_Flow  prod_webserver  2024-04-25T23:00:00Z   \n",
              " 2  10.138.69.97  ...  AWS_VPC_Flow  prod_webserver  2024-04-25T23:00:00Z   \n",
              " 3  10.138.69.97  ...  AWS_VPC_Flow  prod_webserver  2024-04-25T23:00:00Z   \n",
              " 4  10.138.69.97  ...  AWS_VPC_Flow  prod_webserver  2024-04-25T23:00:00Z   \n",
              " \n",
              "   detection_types duration packet_size  src_ip_encoded  dst_ip_encoded  \\\n",
              " 0        waf_rule    600.0       18592               5               0   \n",
              " 1        waf_rule    600.0       49098              12               0   \n",
              " 2        waf_rule    600.0       41974               8               0   \n",
              " 3        waf_rule    600.0       44824               0               0   \n",
              " 4        waf_rule    600.0       20418              10               0   \n",
              " \n",
              "    src_ip_country_code_encoded  anomaly  \n",
              " 0                            0        0  \n",
              " 1                            6        0  \n",
              " 2                            2        0  \n",
              " 3                            6        0  \n",
              " 4                            5        0  \n",
              " \n",
              " [5 rows x 22 columns])"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Yoeeh0wJSrP3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "sKWk7um1Tw3Z"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}